<?php

use Drupal\search_api\Entity\Index;

/**
 * Implements hook_search_api_solr_field_mapping_alter().
 */
function search_api_solr_umami_search_api_solr_field_mapping_alter(\Drupal\search_api\IndexInterface $index, array &$fields) {
  $single_values = [
    'average_voting',
  ];

  foreach ($single_values as $single_value) {
    if (isset($fields[$single_value])) {
      $parts = explode('_', $fields[$single_value]);
      // For example use a sds_* single value field instead of the sdm_* multi-valued one.
      $parts[0] = preg_replace('/(.+)m$/', '$1s', $parts[0]);
      $fields[$single_value] = implode('_', $parts);
    }
  }
}

/**
 * Implements hook_search_api_solr_finalize_index().
 *
 * @throws \Drupal\search_api\SearchApiException
 */
function search_api_solr_umami_search_api_solr_finalize_index(\Drupal\search_api\IndexInterface $index) {
  if ('recipes' == $index->id()) {
    $cu_options = [
      'commit.waitSearcher' => TRUE,
      'commit.softCommit' => TRUE,
    ];

    /** @var \Drupal\search_api_solr\Utility\StreamingExpressionQueryHelper $queryHelper */
    $queryHelper = \Drupal::service('search_api_solr.streaming_expression_query_helper');

    $query = $queryHelper->createQuery($index);
    $exp = $queryHelper->getStreamingExpressionBuilder($query);

    $streaming_expression =
      $exp->_commit_update(
        $exp->innerJoin(
          $exp->_search_all(
            'q=' . $exp->_field_escaped_value('search_api_datasource','entity:node'),
            'fq="' . $exp->_index_filter_query() . '"',
            'fl="' . $exp->_all_fields_list(',', TRUE, ['score', 'random', 'average_voting']) . '"',
            'sort="' . $exp->_field('nid') . ' asc"'
          ),
          $exp->select(
            $exp->rollup(
              $exp->_search_all(
                'q=' . $exp->_field_escaped_value('search_api_datasource','entity:vote'),
                'fq="' . $exp->_index_filter_query() . '"',
                'fl="' . $exp->_field_list([
                  'entity_id',
                  'value'
                ]) . '"',
                'sort="' . $exp->_field('entity_id') . ' asc"'
              ),
              'over="' . $exp->_field('entity_id') . '"',
              'avg(' . $exp->_field('value') . ')'
            ),
            $exp->_field('entity_id') . ' as ' . $exp->_field('nid'),
            'avg(' . $exp->_field('value') . ') as ' . $exp->_field('average_voting')
          ),
          'on=' . $exp->_field('nid')
        ),
        $cu_options
      );

    $queryHelper->setStreamingExpression($query, $streaming_expression);

    $index->getServerInstance()
      ->getBackend()
      ->executeStreamingExpression($query);
  }
}

function search_api_solr_umami_search_api_solr_query_alter(Solarium\QueryType\Select\Query\Query $solarium_query, Drupal\search_api\Query\Query $query) {
  if ($query->hasTag('views_recipe_solr_search')) {

    /** @var \Drupal\search_api_solr\Utility\StreamingExpressionQueryHelper $queryHelper */
    $queryHelper = \Drupal::service('search_api_solr.streaming_expression_query_helper');
    $exp = $queryHelper->getStreamingExpressionBuilder($query);

    $average_voting_field = $exp->_field('average_voting');
    $user_voting_field = $exp->_field('user_voting');
    $nid_field = $exp->_field('nid');
    $entity_id_field = $exp->_field('entity_id');

    $facet_set = $solarium_query->getFacetSet();

    $facet_set->removeFacet($average_voting_field);

    $facet_set->createFacetRange([
      'key' => $average_voting_field,
      'field' => $average_voting_field,
      'start' => 0,
      'end' => 5,
      'gap' => 1,
    ]);
  }

  if ($query->hasTag('facet:user_voting')) {
    $solarium_query->addFilterQuery([
      'key' => 'user_filter',
      'query' => '{!join from=' . $entity_id_field . ' to=' . $nid_field . '}' .
        $exp->_field_value('user_id', \Drupal::currentUser()->id()),
    ]);
  }
}

function search_api_solr_umami_search_api_query_alter(\Drupal\search_api\Query\QueryInterface &$query) {
  foreach ($query->getConditionGroup()->getConditions() as $nested_condition_group) {
    if ($nested_condition_group instanceof \Drupal\search_api\Query\ConditionGroupInterface) {
      if ($nested_condition_group->hasTag('facet:average_voting')) {
        $condition = $nested_condition_group->getConditions()[0];

        $exclusive_range_condition_group = new \Drupal\search_api\Query\ConditionGroup();
        $exclusive_range_condition_group->addCondition(
          $condition->getField(),
          $condition->getValue(),
          '>='
        );
        $exclusive_range_condition_group->addCondition(
          $condition->getField(),
          $condition->getValue() + 1,
          '<'
        );

        $nested_condition_group->addConditionGroup($exclusive_range_condition_group);
      }
      elseif ($nested_condition_group->hasTag('facet:user_voting')) {
        $query->addTag('facet:user_voting');
      }
    }
  }
}
